import random
import math
import sys


class PoziomTrudnosci:
    """Klasa definiujƒÖca parametry poziomu trudno≈õci."""

    def __init__(self, nazwa, zakres, max_prob, podpowiedzi):
        self.nazwa = nazwa
        self.dolny_limit = 1
        self.gorny_limit = zakres
        self.max_prob = max_prob
        self.podpowiedzi = podpowiedzi  # Czy dostƒôpne podpowiedzi

    def oblicz_optymalne_proby(self):
        """Oblicza teoretycznƒÖ liczbƒô pr√≥b (logarytm binarny)."""
        return math.ceil(math.log2(self.gorny_limit))


# Definicja poziom√≥w
POZIOMY = {
    '1': PoziomTrudnosci('≈ÅATWY', 50, 10, True),
    '2': PoziomTrudnosci('≈öREDNI', 100, 7, True),
    '3': PoziomTrudnosci('TRUDNY', 500, 9, False),
    '4': PoziomTrudnosci('EKSPERT', 1000, 10, False)
}


def wyswietl_menu():
    """Wy≈õwietla menu wyboru poziomu."""
    print("\n" + "=" * 50)
    print("üé≤  GRA ZGADYWANIE LICZB  üé≤".center(50))
    print("=" * 50)
    print("\nWybierz poziom trudno≈õci:\n")

    for klucz, poziom in POZIOMY.items():
        opt_proby = poziom.oblicz_optymalne_proby()
        podpowiedzi_tekst = "‚úì" if poziom.podpowiedzi else "‚úó"
        print(f"  [{klucz}] {poziom.nazwa:10} - Zakres: 1-{poziom.gorny_limit:4} | "
              f"Pr√≥by: {poziom.max_prob:2} | Podpowiedzi: {podpowiedzi_tekst} | "
              f"Optymalna strategia: {opt_proby} pr√≥b")

    print("\n  [Q] Wyj≈õcie")
    print("=" * 50)


def wybierz_poziom():
    """Pozwala graczowi wybraƒá poziom trudno≈õci."""
    while True:
        wyswietl_menu()
        wybor = input("\nTw√≥j wyb√≥r: ").strip().upper()

        if wybor == 'Q':
            print("Do zobaczenia!")
            return None

        if wybor in POZIOMY:
            return POZIOMY[wybor]

        print("‚ùå Nieprawid≈Çowy wyb√≥r! Spr√≥buj ponownie.")


def podaj_podpowiedz(wylosowana, proby, poziom):
    """Generuje podpowied≈∫ w zale≈ºno≈õci od liczby pr√≥b."""

    if not poziom.podpowiedzi:
        return None

    # Progresywne podpowiedzi
    if proby == poziom.max_prob - 3:
        if wylosowana % 2 == 0:
            return "üí° Podpowied≈∫: Liczba jest PARZYSTA"
        else:
            return "üí° Podpowied≈∫: Liczba jest NIEPARZYSTA"

    elif proby == poziom.max_prob - 1:
        # Podaj przedzia≈Ç
        polowa = poziom.gorny_limit // 2
        if wylosowana <= polowa:
            return f"üí° Podpowied≈∫: Liczba jest w zakresie 1-{polowa}"
        else:
            return f"üí° Podpowied≈∫: Liczba jest w zakresie {polowa + 1}-{poziom.gorny_limit}"

    return None


def gra_zgadywanie_liczb():
    """G≈Ç√≥wna funkcja gry z systemem poziom√≥w."""

    # Wyb√≥r poziomu
    poziom = wybierz_poziom()
    if poziom is None:
        return

    # Inicjalizacja gry
    wylosowana_liczba = random.randint(poziom.dolny_limit, poziom.gorny_limit)
    proby = 0
    historia = []  # Lista poprzednich zgadniƒôƒá

    print(f"\nüéØ Poziom: {poziom.nazwa}")
    print(f"Zakres: {poziom.dolny_limit}-{poziom.gorny_limit}")
    print(f"Maksymalna liczba pr√≥b: {poziom.max_prob}")
    print(f"Optymalna strategia: {poziom.oblicz_optymalne_proby()} pr√≥b (przeszukiwanie binarne)\n")

    try:
        while proby < poziom.max_prob:
            # Poka≈º pozosta≈Çe pr√≥by
            pozostalo = poziom.max_prob - proby
            print(f"[Pr√≥ba {proby + 1}/{poziom.max_prob}] Pozosta≈Ço: {pozostalo}")

            # Poka≈º historiƒô (ostatnie 3 pr√≥by)
            if historia:
                ostatnie = historia[-3:]
                print(f"  Twoje poprzednie pr√≥by: {', '.join(map(str, ostatnie))}")

            # Podpowied≈∫ (je≈õli dostƒôpna)
            podpowiedz = podaj_podpowiedz(wylosowana_liczba, proby, poziom)
            if podpowiedz:
                print(f"  {podpowiedz}")

            # Pobierz liczbƒô
            zgadywana_str = input("Podaj swojƒÖ liczbƒô: ")

            # Walidacja
            try:
                zgadywana = int(zgadywana_str)
            except ValueError:
                print("To nie jest prawid≈Çowa liczba!\n")
                continue

            if zgadywana < poziom.dolny_limit or zgadywana > poziom.gorny_limit:
                print(f"Liczba musi byƒá w zakresie {poziom.dolny_limit}-{poziom.gorny_limit}!\n")
                continue

            # Zwiƒôksz licznik i dodaj do historii
            proby += 1
            historia.append(zgadywana)

            # Sprawd≈∫ odpowied≈∫
            if zgadywana < wylosowana_liczba:
                roznica = wylosowana_liczba - zgadywana
                if roznica <= 5:
                    print("Ciep≈Ço! Za ma≈Ço!\n")
                else:
                    print("Za ma≈Ço!\n")

            elif zgadywana > wylosowana_liczba:
                roznica = zgadywana - wylosowana_liczba
                if roznica <= 5:
                    print("Ciep≈Ço! Za du≈ºo!\n")
                else:
                    print("Za du≈ºo!\n")

            else:
                # WYGRANA!
                print(f"GRATULACJE! Odgad≈Çe≈õ liczbƒô {wylosowana_liczba}!")
                print(f"Liczba pr√≥b: {proby}/{poziom.max_prob}")

                # Ocena wydajno≈õci
                optymalna = poziom.oblicz_optymalne_proby()
                if proby <= optymalna:
                    print("PERFEKCYJNIE! OsiƒÖgnƒÖ≈Çe≈õ optymalny wynik!")
                elif proby <= poziom.max_prob // 2:
                    print("≈öWIETNIE! Powy≈ºej ≈õredniej!")
                else:
                    print("DOBRZE! Uda≈Ço siƒô!")
                return

        # PRZEGRANA (zabrak≈Ço pr√≥b)
        print("\n" + "üòû" * 25)
        print(f"Niestety przegra≈Çe≈õ! Zabrak≈Ço pr√≥b.")
        print(f"Prawid≈Çowa liczba to: {wylosowana_liczba}")
        print(f"Twoje pr√≥by: {', '.join(map(str, historia))}")
        print("üòû" * 25)

    except KeyboardInterrupt:
        print("\n\nGra przerwana przez u≈ºytkownika. Do zobaczenia!")

def main():
    """G≈Ç√≥wna pƒôtla programu z mo≈ºliwo≈õciƒÖ ponownej gry."""
    try:
        while True:
            gra_zgadywanie_liczb()

            print("\n" + "=" * 50)
            try:
                ponownie = input("Chcesz zagraƒá ponownie? (T/N): ").strip().upper()
            except KeyboardInterrupt:
                print("\n\nProgram zostal zamkniety.")
                break
            if ponownie != 'T':
                print("\nDziƒôkujƒô za grƒô! Do zobaczenia!")
                break
    except KeyboardInterrupt:
        # Dodatkowa ochrona (gdyby co≈õ przesz≈Ço przez pierwszy try-except)
        print("\n\n‚ö†Ô∏è Program zako≈Ñczony (Ctrl+C/Stop). Do zobaczenia! üëã")

    except Exception as ex:
        # ≈Åapie wszystkie inne nieoczekiwane b≈Çƒôdy
        print(f"\n‚ùå Krytyczny b≈ÇƒÖd programu: {ex}")
        print("Program zostanie zamkniƒôty.")
        sys.exit(1)

    finally:
        # Ten blok wykona siƒô ZAWSZE, niezale≈ºnie od tego, jak zako≈Ñczy≈Ç siƒô program
        print("\n" + "=" * 50)
        print("Program zako≈Ñczony.".center(50))
        print("=" * 50)



if __name__ == "__main__":
    main()